use package Base
use package Stdlib
use HtmlParser

module Mathml :> sig

  module HtmlParser : sig
    type node =
      | Element of string * list node
      | Text of string
    val run : string -> Base.result (list node) (list (Base.Parser.parse-error Base.Char.t))
  end

  val \math : inline [math-text]
  val output-scripts : string -> (option string) -> (option string) -> string

  val \text : math [inline-text]
  val \frac : math [math-text, math-text]
  val \sqrt : math [math-text]

end = struct

  module HtmlParser = HtmlParser

  val list-includes f lst =
    match Base.List.find f lst with
    | Some(_) -> true
    | None -> false
    end

  val tag (name : string) (inner : string) =
    `<` ^ name ^ `>` ^ inner ^ `</` ^ name ^ `>`

  val math-tag (tinfo : text-info) (name : string) (inner : list math-text) =
    tag name (Base.String.concat (Stdlib.List.map (fun (mt : math-text) ->
      tag `mrow` (stringify-math tinfo mt)
    ) inner))

  val inline tinfo \math m = tag `math` (stringify-math tinfo m)

  val math-element (x : string) =
    if Base.String.equal x `<` then
      tag `mo` `&lt;`
    else if Base.String.equal x `>` then
      tag `mo` `&gt;`
    else if list-includes (Base.String.equal x) [`=`, `:`, `+`, `-`, `|`, `,`, `(`, `)`] then
      tag `mo` x
    else if list-includes (Base.String.equal x) [`0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`] then
      tag `mn` x
    else if Base.String.length x == 1 then
      tag `mi` x
    else
      tag `mrow` x

  val output-scripts (base : string) (sub-opt : option string) (sup-opt : option string) =
    match (sub-opt, sup-opt) with
    | (None, None)           -> math-element base
    | (Some(sub), None)      -> tag `msub` ((math-element base) ^ sub)
    | (None, Some(sup))      -> tag `msup` ((math-element base) ^ sup)
    | (Some(sub), Some(sup)) -> tag `msubsup` ((math-element base) ^ sub ^ sup)
    end

  val math tinfo \text (it : inline-text) =
    tag `mtext` (stringify-inline tinfo it)

  val math tinfo \frac (numer : math-text) (denom : math-text) =
    math-tag tinfo `mfrac` [numer, denom]

  val math tinfo \sqrt (inner : math-text) =
    math-tag tinfo `msqrt` [inner]

end
