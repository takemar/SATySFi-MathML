use package open Base
use HtmlUtil

module Mathml :> sig

  module HtmlUtil : sig
    type node =
      | Element of string * list node
      | Text of string
    val parse : string -> result (list node) (list (Parser.parse-error Char.t))
    val render : list node -> string
  end

  val \math : inline [math-text]
  val output-scripts : string -> (option string) -> (option string) -> string

  val \text : math [inline-text]
  val \frac : math [math-text, math-text]
  val \sqrt : math [math-text]

end = struct

  module HtmlUtil = HtmlUtil

  val list-includes f lst =
    match List.find f lst with
    | Some(_) -> true
    | None -> false
    end

  val tag (name : string) (inner : string) =
    `<` ^ name ^ `>` ^ inner ^ `</` ^ name ^ `>`

  val math-tag (tinfo : text-info) (name : string) (inner : list math-text) =
    tag name (String.concat (List.map (fun (mt : math-text) ->
      tag `mrow` (stringify-math tinfo mt)
    ) inner))

  val inline tinfo \math m =
    let open HtmlUtil in
    let rec fold-nodes f lst =
      let rec aux fn newrev old =
        match old with
        | [] -> newrev
        | head :: [] -> List.append (List.reverse (fn head None)) newrev
        | head :: (next :: tail) ->
            match List.reverse (fn head next) with
            | [] -> aux fn newrev (None :: tail)
            | h :: t -> aux fn (List.append t newrev) (Some(h) :: tail)
            end
        end
      in
      lst
      |> (List.map Option.some)
      |> (List.cons None)
      |> (aux f [])
      |> List.reverse
    in
    let rec mod-nodes ns =
      fold-nodes (fun xopt x2opt ->
        let yopt =
          match x2opt with
          | Some(Element(name, content)) -> Some(Element(name, mod-nodes content))
          | Some(Text(value)) -> Some(Text(value))
          | None -> None
          end
        in
        match (xopt, yopt) with
        | (Some(Element(`mn`, c1)), Some(Element(`mn`, c2))) ->
            [Element(`mn`, List.append c1 c2)]
        | (Some(x), Some(y)) -> [x, y]
        | (Some(x), None) -> [x]
        | (None, Some(y)) -> [y]
        | (None, None) -> []
        end
      ) ns
    in
    let unwrap opt =
      match opt with
      | Ok(x) -> x
      | Err(_) ->
          [Element(`merror`, [Element(`mtext`, [Text(`satysfi-mathml internal bug (parse error)`)])])]
      end
    in

    stringify-math tinfo m
    |> parse
    |> unwrap
    |> mod-nodes
    |> render
    |> tag `math`

  val math-element (x : string) =
    if String.equal x `<` then
      tag `mo` `&lt;`
    else if String.equal x `>` then
      tag `mo` `&gt;`
    else if list-includes (String.equal x) [`=`, `:`, `+`, `-`, `|`, `,`, `(`, `)`] then
      tag `mo` x
    else if list-includes (String.equal x) [`0`, `1`, `2`, `3`, `4`, `5`, `6`, `7`, `8`, `9`] then
      tag `mn` x
    else if String.length x == 1 then
      tag `mi` x
    else
      tag `mrow` x

  val output-scripts (base : string) (sub-opt : option string) (sup-opt : option string) =
    match (sub-opt, sup-opt) with
    | (None, None)           -> math-element base
    | (Some(sub), None)      -> tag `msub` ((math-element base) ^ sub)
    | (None, Some(sup))      -> tag `msup` ((math-element base) ^ sup)
    | (Some(sub), Some(sup)) -> tag `msubsup` ((math-element base) ^ sub ^ sup)
    end

  val math tinfo \text (it : inline-text) =
    tag `mtext` (stringify-inline tinfo it)

  val math tinfo \frac (numer : math-text) (denom : math-text) =
    math-tag tinfo `mfrac` [numer, denom]

  val math tinfo \sqrt (inner : math-text) =
    math-tag tinfo `msqrt` [inner]

end
